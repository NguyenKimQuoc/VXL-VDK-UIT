
ClockUsingDelay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800064  00800064  00000378  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000867  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060f  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000346  00000000  00000000  00001282  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b9  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000333  00000000  00000000  000019c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 26 01 	call	0x24c	; 0x24c <main>
  8a:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z7Displayv>:
    while (1) {	
		Display();
    }
}

void Display(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e7       	ldi	r18, 0x7F	; 127
  98:	84 ed       	ldi	r24, 0xD4	; 212
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <_Z7Displayv+0xa>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_Z7Displayv+0x14>
  a6:	00 00       	nop
	_delay_ms(34);
	count++;
  a8:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <count>
  ac:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <count+0x1>
  b0:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <count+0x2>
  b4:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <count+0x3>
  b8:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <count+0x4>
  bc:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <count+0x5>
  c0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count+0x6>
  c4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <count+0x7>
  c8:	a1 e0       	ldi	r26, 0x01	; 1
  ca:	0e 94 42 01 	call	0x284	; 0x284 <__adddi3_s8>
  ce:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <count>
  d2:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <count+0x1>
  d6:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <count+0x2>
  da:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <count+0x3>
  de:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <count+0x4>
  e2:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <count+0x5>
  e6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <count+0x6>
  ea:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <count+0x7>
	if(count==25){
  ee:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <count>
  f2:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <count+0x1>
  f6:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <count+0x2>
  fa:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <count+0x3>
  fe:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <count+0x4>
 102:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <count+0x5>
 106:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <count+0x6>
 10a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <count+0x7>
 10e:	a9 e1       	ldi	r26, 0x19	; 25
 110:	0e 94 4e 01 	call	0x29c	; 0x29c <__cmpdi2_s8>
 114:	c9 f4       	brne	.+50     	; 0x148 <_Z7Displayv+0xb6>
		second++;
 116:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 11a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 124:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		count=0;
 128:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count>
 12c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <count+0x1>
 130:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <count+0x2>
 134:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count+0x3>
 138:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count+0x4>
 13c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count+0x5>
 140:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count+0x6>
 144:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <count+0x7>
	}
	if(second==60){
 148:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 14c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 150:	cc 97       	sbiw	r24, 0x3c	; 60
 152:	69 f4       	brne	.+26     	; 0x16e <_Z7Displayv+0xdc>
		minute=minute+1;
 154:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 158:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 162:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		second=0;
 166:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 16a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
	}
	if(minute==60){
 16e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 172:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 176:	cc 97       	sbiw	r24, 0x3c	; 60
 178:	69 f4       	brne	.+26     	; 0x194 <_Z7Displayv+0x102>
		hour=hour+1;
 17a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hour>
 17e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <hour+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <hour+0x1>
 188:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <hour>
		minute=0;
 18c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 190:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if(hour==24){
 194:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hour>
 198:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <hour+0x1>
 19c:	48 97       	sbiw	r24, 0x18	; 24
 19e:	21 f4       	brne	.+8      	; 0x1a8 <_Z7Displayv+0x116>
		hour=0;
 1a0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <hour+0x1>
 1a4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <hour>
	}
	int hour1=hour/10;
 1a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <hour>
 1ac:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <hour+0x1>
	int hour2=hour%10;
	int minute1=minute/10;
 1b0:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b4:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
	int minute2=minute%10;
	int second1=second/10;
 1b8:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <__data_end>
 1bc:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <__data_end+0x1>
	int second2=second%10;
	PORTD=0b00000001;
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	22 bb       	out	0x12, r18	; 18
	PORTC=hour1;
 1c4:	2a e0       	ldi	r18, 0x0A	; 10
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	b9 01       	movw	r22, r18
 1ca:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodhi4>
 1ce:	65 bb       	out	0x15, r22	; 21
 1d0:	af ec       	ldi	r26, 0xCF	; 207
 1d2:	b7 e0       	ldi	r27, 0x07	; 7
 1d4:	11 97       	sbiw	r26, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <_Z7Displayv+0x142>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <_Z7Displayv+0x148>
 1da:	00 00       	nop
	_delay_ms(1);
	PORTD=0b00000010;
 1dc:	92 e0       	ldi	r25, 0x02	; 2
 1de:	92 bb       	out	0x12, r25	; 18
	PORTC=hour2;
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	8f ec       	ldi	r24, 0xCF	; 207
 1e4:	97 e0       	ldi	r25, 0x07	; 7
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <_Z7Displayv+0x154>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <_Z7Displayv+0x15a>
 1ec:	00 00       	nop
	_delay_ms(1);
	PORTD=0b00000100;
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	82 bb       	out	0x12, r24	; 18
	PORTC=minute1;
 1f2:	ce 01       	movw	r24, r28
 1f4:	b9 01       	movw	r22, r18
 1f6:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodhi4>
 1fa:	65 bb       	out	0x15, r22	; 21
 1fc:	af ec       	ldi	r26, 0xCF	; 207
 1fe:	b7 e0       	ldi	r27, 0x07	; 7
 200:	11 97       	sbiw	r26, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <_Z7Displayv+0x16e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <_Z7Displayv+0x174>
 206:	00 00       	nop
	_delay_ms(1);
	PORTD=0b00001000;
 208:	98 e0       	ldi	r25, 0x08	; 8
 20a:	92 bb       	out	0x12, r25	; 18
	PORTC=minute2;
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	8f ec       	ldi	r24, 0xCF	; 207
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <_Z7Displayv+0x180>
 216:	00 c0       	rjmp	.+0      	; 0x218 <_Z7Displayv+0x186>
 218:	00 00       	nop
	_delay_ms(1);
	PORTD=0b00010000;
 21a:	80 e1       	ldi	r24, 0x10	; 16
 21c:	82 bb       	out	0x12, r24	; 18
	PORTC=second1;
 21e:	cf 01       	movw	r24, r30
 220:	b9 01       	movw	r22, r18
 222:	0e 94 2e 01 	call	0x25c	; 0x25c <__divmodhi4>
 226:	65 bb       	out	0x15, r22	; 21
 228:	af ec       	ldi	r26, 0xCF	; 207
 22a:	b7 e0       	ldi	r27, 0x07	; 7
 22c:	11 97       	sbiw	r26, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <_Z7Displayv+0x19a>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_Z7Displayv+0x1a0>
 232:	00 00       	nop
	_delay_ms(1);
	PORTD=0b00100000;
 234:	90 e2       	ldi	r25, 0x20	; 32
 236:	92 bb       	out	0x12, r25	; 18
	PORTC=second2;
 238:	85 bb       	out	0x15, r24	; 21
 23a:	ef ec       	ldi	r30, 0xCF	; 207
 23c:	f7 e0       	ldi	r31, 0x07	; 7
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <_Z7Displayv+0x1ac>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_Z7Displayv+0x1b2>
 244:	00 00       	nop
	_delay_ms(1);
	
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <main>:
int second=0;

int main(void){
    /* Replace with your application code */
	
	DDRC=0xff;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	84 bb       	out	0x14, r24	; 20
	DDRD=0xff;
 250:	81 bb       	out	0x11, r24	; 17
	PORTC=0x00;
 252:	15 ba       	out	0x15, r1	; 21
	PORTD=0x00;
 254:	12 ba       	out	0x12, r1	; 18
    while (1) {	
		Display();
 256:	0e 94 49 00 	call	0x92	; 0x92 <_Z7Displayv>
 25a:	fd cf       	rjmp	.-6      	; 0x256 <main+0xa>

0000025c <__divmodhi4>:
 25c:	97 fb       	bst	r25, 7
 25e:	07 2e       	mov	r0, r23
 260:	16 f4       	brtc	.+4      	; 0x266 <__divmodhi4+0xa>
 262:	00 94       	com	r0
 264:	07 d0       	rcall	.+14     	; 0x274 <__divmodhi4_neg1>
 266:	77 fd       	sbrc	r23, 7
 268:	09 d0       	rcall	.+18     	; 0x27c <__divmodhi4_neg2>
 26a:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__udivmodhi4>
 26e:	07 fc       	sbrc	r0, 7
 270:	05 d0       	rcall	.+10     	; 0x27c <__divmodhi4_neg2>
 272:	3e f4       	brtc	.+14     	; 0x282 <__divmodhi4_exit>

00000274 <__divmodhi4_neg1>:
 274:	90 95       	com	r25
 276:	81 95       	neg	r24
 278:	9f 4f       	sbci	r25, 0xFF	; 255
 27a:	08 95       	ret

0000027c <__divmodhi4_neg2>:
 27c:	70 95       	com	r23
 27e:	61 95       	neg	r22
 280:	7f 4f       	sbci	r23, 0xFF	; 255

00000282 <__divmodhi4_exit>:
 282:	08 95       	ret

00000284 <__adddi3_s8>:
 284:	00 24       	eor	r0, r0
 286:	a7 fd       	sbrc	r26, 7
 288:	00 94       	com	r0
 28a:	2a 0f       	add	r18, r26
 28c:	30 1d       	adc	r19, r0
 28e:	40 1d       	adc	r20, r0
 290:	50 1d       	adc	r21, r0
 292:	60 1d       	adc	r22, r0
 294:	70 1d       	adc	r23, r0
 296:	80 1d       	adc	r24, r0
 298:	90 1d       	adc	r25, r0
 29a:	08 95       	ret

0000029c <__cmpdi2_s8>:
 29c:	00 24       	eor	r0, r0
 29e:	a7 fd       	sbrc	r26, 7
 2a0:	00 94       	com	r0
 2a2:	2a 17       	cp	r18, r26
 2a4:	30 05       	cpc	r19, r0
 2a6:	40 05       	cpc	r20, r0
 2a8:	50 05       	cpc	r21, r0
 2aa:	60 05       	cpc	r22, r0
 2ac:	70 05       	cpc	r23, r0
 2ae:	80 05       	cpc	r24, r0
 2b0:	90 05       	cpc	r25, r0
 2b2:	08 95       	ret

000002b4 <__udivmodhi4>:
 2b4:	aa 1b       	sub	r26, r26
 2b6:	bb 1b       	sub	r27, r27
 2b8:	51 e1       	ldi	r21, 0x11	; 17
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <__udivmodhi4_ep>

000002bc <__udivmodhi4_loop>:
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	a6 17       	cp	r26, r22
 2c2:	b7 07       	cpc	r27, r23
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <__udivmodhi4_ep>
 2c6:	a6 1b       	sub	r26, r22
 2c8:	b7 0b       	sbc	r27, r23

000002ca <__udivmodhi4_ep>:
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	5a 95       	dec	r21
 2d0:	a9 f7       	brne	.-22     	; 0x2bc <__udivmodhi4_loop>
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	bc 01       	movw	r22, r24
 2d8:	cd 01       	movw	r24, r26
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
